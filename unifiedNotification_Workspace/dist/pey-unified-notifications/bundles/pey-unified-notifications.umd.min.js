!function(e,i){"object"==typeof exports&&"undefined"!=typeof module?i(exports,require("@ionic-native/firebase/ngx/index"),require("@angular/fire/messaging"),require("rxjs/operators"),require("rxjs"),require("@ionic/angular"),require("@ionic/angular/dist/providers/platform"),require("@ionic-native/dialogs/ngx/index"),require("@angular/core"),require("@ionic-native/dialogs/ngx"),require("@ionic-native/firebase/ngx")):"function"==typeof define&&define.amd?define("pey-unified-notifications",["exports","@ionic-native/firebase/ngx/index","@angular/fire/messaging","rxjs/operators","rxjs","@ionic/angular","@ionic/angular/dist/providers/platform","@ionic-native/dialogs/ngx/index","@angular/core","@ionic-native/dialogs/ngx","@ionic-native/firebase/ngx"],i):i(e["pey-unified-notifications"]={},e.i1,e.ng.fire.messaging,e.rxjs.operators,e.rxjs,e.angular,e.i1$2,e.i2,e.ng.core,e.ngx,e.ngx$1)}(this,function(e,i,t,n,o,r,s,a,c,u,f){"use strict";var p=function(){function e(e){this.firebase=e,this.permission=new o.BehaviorSubject(null),this.token=new o.BehaviorSubject(null),this.currentMessage=new o.BehaviorSubject(null),this.isAlive=!0}return e.prototype.ngOnDestroy=function(){this.isAlive=!1},e.prototype.init=function(){this.getToken(),this.initNotifications()},e.prototype.getToken=function(){var i=this;this.firebase.getToken().then(function(e){i.token.next(e)})["catch"](function(e){return console.log(e)}),this.firebase.onTokenRefresh().pipe(n.takeWhile(function(){return i.isAlive})).subscribe(function(e){e&&e!==i.token&&i.token.next(e)})},e.prototype.initNotifications=function(){var i=this;this.firebase.onNotificationOpen().pipe(n.takeWhile(function(){return i.isAlive})).subscribe(function(e){i.currentMessage.next(e)})},e.prototype.joinGroup=function(e){console.log("subscribe to group"+e),this.firebase.subscribe(e)},e.prototype.leaveGroup=function(e){console.log("unsubscribe to group"+e),this.firebase.unsubscribe(e)},e.prototype.updatePermission=function(){var i=this;this.firebase.grantPermission().then(function(e){i.permission.next(e)})["catch"](function(e){return console.log(e)}),this.firebase.hasPermission().then(function(e){console.log("permission"),console.log(e)})["catch"](function(e){return console.log(e)})},e.prototype.hasPermission=function(){return this.firebase.hasPermission().then(function(e){return e.isEnabled})},e.decorators=[{type:c.Injectable,args:[{providedIn:"root"}]}],e.ctorParameters=function(){return[{type:f.Firebase}]},e.ngInjectableDef=c.defineInjectable({factory:function(){return new e(c.inject(i.Firebase))},token:e,providedIn:"root"}),e}(),l=function(){function e(e){this.platformService=e}return Object.defineProperty(e.prototype,"isNative",{get:function(){return!(!document.URL.startsWith("http://")||document.URL.startsWith("http://localhost:81"))},enumerable:!0,configurable:!0}),e.decorators=[{type:c.Injectable,args:[{providedIn:"root"}]}],e.ctorParameters=function(){return[{type:r.Platform}]},e.ngInjectableDef=c.defineInjectable({factory:function(){return new e(c.inject(s.Platform))},token:e,providedIn:"root"}),e}(),h=function(){function e(e){this.angularFireMessaging=e,this.permission=new o.BehaviorSubject(null),this.token=new o.BehaviorSubject(null),this.currentMessage=new o.BehaviorSubject(null),this.isAlive=!0}return e.prototype.ngOnDestroy=function(){this.isAlive=!1},e.prototype.init=function(){this.angularFireMessaging.messaging.subscribe(function(e){e.onMessage=e.onMessage.bind(e),e.onTokenRefresh=e.onTokenRefresh.bind(e)}),this.receiveMessage()},e.prototype.updatePermission=function(){this.getToken()},e.prototype.getToken=function(){var i=this;this.angularFireMessaging.requestToken.pipe(n.takeWhile(function(){return i.isAlive})).subscribe(function(e){i.token.next(e),i.permission.next(!0)},function(e){console.error("Unable to get permission to notify.",e)})},e.prototype.receiveMessage=function(){var i=this;this.angularFireMessaging.messages.pipe(n.takeWhile(function(){return i.isAlive})).subscribe(function(e){i.currentMessage.next(e)})},e.prototype.onTokenRefresh=function(){var i=this;this.angularFireMessaging.tokenChanges.pipe(n.takeWhile(function(){return i.isAlive})).subscribe(function(e){i.token.next(e)})},e.decorators=[{type:c.Injectable,args:[{providedIn:"root"}]}],e.ctorParameters=function(){return[{type:t.AngularFireMessaging}]},e.ngInjectableDef=c.defineInjectable({factory:function(){return new e(c.inject(t.AngularFireMessaging))},token:e,providedIn:"root"}),e}(),g=function(){function e(e,i,t,n){this.mobileNotifications=e,this.webNotifications=i,this.platformHelper=t,this.platformService=n,this.currentMessage=new o.BehaviorSubject(null),this.token=new o.BehaviorSubject(null),this.IsActive=!1,this.permission=new o.BehaviorSubject(null),this.init()}return e.prototype.init=function(){this.platformHelper.isNative?(this.mobileNotifications.init(),this.currentMessage=this.mobileNotifications.currentMessage,this.permission=this.mobileNotifications.permission,this.token=this.mobileNotifications.token):(this.webNotifications.init(),this.currentMessage=this.webNotifications.currentMessage,this.token=this.webNotifications.token,this.permission=this.webNotifications.permission),this.IsActive=!0},e.prototype.joinGroup=function(e){this.platformHelper.isNative?this.mobileNotifications.joinGroup(e):console.log("web topic/group subscriptions have to be resolved serverside")},e.prototype.leaveGroup=function(e){this.platformHelper.isNative?this.mobileNotifications.leaveGroup(e):console.log("web topic/group subscriptions have to be resolved serverside")},e.prototype.updatePermission=function(){this.platformHelper.isNative?this.mobileNotifications.updatePermission():this.webNotifications.getToken()},e.prototype.hasPermission=function(){return this.platformService.is("ios")&&this.platformHelper.isNative?this.mobileNotifications.hasPermission().then(function(e){return console.log(e),e}):new Promise(function(){return!0})},e.decorators=[{type:c.Injectable,args:[{providedIn:"root"}]}],e.ctorParameters=function(){return[{type:p},{type:h},{type:l},{type:r.Platform}]},e.ngInjectableDef=c.defineInjectable({factory:function(){return new e(c.inject(p),c.inject(h),c.inject(l),c.inject(s.Platform))},token:e,providedIn:"root"}),e}(),b=function(){function e(e,i,t){this.platformService=e,this.dialogs=i,this.unifiedNotificationService=t}return e.prototype.canActivate=function(e,i){var t=this;return!this.platformService.is("ios")||this.unifiedNotificationService.hasPermission().then(function(e){return!!e||t.dialogs.alert("This app requires push notifications to work as intended.\nYou can turn them silent any time you want.","Important").then(function(){return t.unifiedNotificationService.updatePermission(),!0})["catch"](function(e){return console.log(e),!0})})},e.decorators=[{type:c.Injectable,args:[{providedIn:"root"}]}],e.ctorParameters=function(){return[{type:r.Platform},{type:u.Dialogs},{type:g}]},e.ngInjectableDef=c.defineInjectable({factory:function(){return new e(c.inject(s.Platform),c.inject(a.Dialogs),c.inject(g))},token:e,providedIn:"root"}),e}(),d=function(){function e(){}return e.prototype.ngOnInit=function(){},e.decorators=[{type:c.Component,args:[{selector:"lib-pey-unified-notifications",template:"\n    <p>\n      pey-unified-notifications works!\n    </p>\n  "}]}],e.ctorParameters=function(){return[]},e}(),v=function(){function e(){}return e.decorators=[{type:c.NgModule,args:[{declarations:[d],imports:[],exports:[d],providers:[u.Dialogs,f.Firebase]}]}],e}();e.UnifiedFirebaseMessagingService=g,e.IosPushNotificationPermissiongGuard=b,e.PeyUnifiedNotificationsModule=v,e.ɵd=d,e.ɵc=l,e.ɵa=p,e.ɵb=h,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=pey-unified-notifications.umd.min.js.map